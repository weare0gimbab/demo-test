name: deploy
on:
  push:
    branches:
      - "main"
    paths:
      - "src/**"
      - ".github/workflows/deploy.yml"
      - "Dockerfile"

jobs:
  makeTagAndRelease:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false
  buildImageAndPush:
    name: 도커 이미지 빌드와 푸시
    needs: makeTagAndRelease
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2
      - name: 레지스트리 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
        env:
          OWNER: "${{ github.repository_owner }}"
      - name: application-secret.yml 생성
        env:
          ACTIONS_STEP_DEBUG: true
          APPLICATION_SECRET: ${{ secrets.APPLICATION_SECRET_YML }}
        run: echo "$APPLICATION_SECRET" > src/main/resources/application-secret.yml
      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/blog:${{ needs.makeTagAndRelease.outputs.tag_name }},
            ghcr.io/${{ env.OWNER_LC }}/blog:latest
    deploy:
      runs-on: ubuntu-latest
      needs: [ buildImageAndPush ]
      steps:
        - name: AWS SSM Send-Command
          uses: peterkimzz/aws-ssm-send-command@master
          id: ssm
          with:
            aws-region: ${{ secrets.AWS_REGION }}
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            instance-ids: "${{ secrets.AWS_EC2_INSTANCE_ID }}" # EC2 인스턴스 ID
            working-directory: /
            comment: Deploy
            command: |
              set -e

              OWNER="${{ github.repository_owner }}"
              OWNER_LC=$(echo "${OWNER}" | tr '[:upper:]' '[:lower:]')
              IMAGE="ghcr.io/${OWNER_LC}/${{ secrets.DOCKER_IMAGE_NAME }}:latest"
              NAME=${{ secrets.DOCKER_IMAGE_NAME }}
              PORT=8090

              echo "[1/3] 기존 컨테이너 중지 및 삭제"
              docker rm -f "$NAME" 2>/dev/null || true

              echo "[2/3] 최신 이미지 풀"
              docker pull "$IMAGE" || true

              echo "[3/3] 새 컨테이너 실행"
              mkdir -p /dockerProjects/$NAME/volumes/gen
              docker run -d \
                --name "$NAME" \
                --restart unless-stopped \
                -p ${PORT}:8080 \
                -e TZ=Asia/Seoul \
                -v /dockerProjects/$NAME/volumes/gen:/gen \
                "$IMAGE"

              echo "✅ 배포 완료!"